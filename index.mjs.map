{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport ABBRS from './abbreviations.json';\nimport EMOJIS from './emojis.json';\nimport CONTRACT from './contractions.json';\n\n\n// VARIABLES //\n\nvar REGEXP_PREFIXES = /^([,([{*<\"“'`‘]|\\.{1,3})/gi;\nvar REGEXP_SUFFIXES = /([,.!?%*>:;\"'”`)\\]}]|\\.\\.\\.)$/gi;\n\n\n// FUNCTIONS //\n\n/**\n* Extends an array by the elements of another array.\n*\n* @private\n* @param {Array} arr - input array\n* @param {Array} ext - array to extend `arr` with\n* @returns {Array} mutated input array\n*\n* @example\n* var arr = [ 1, 2, 3 ];\n* var out = extend( arr, [ 4, 5 ] );\n* // returns [ 1, 2, 3, 4, 5 ]\n*/\nfunction extend( arr, ext ) {\n\tvar i;\n\tfor ( i = 0; i < ext.length; i++ ) {\n\t\tarr.push( ext[ i ] );\n\t}\n\treturn arr;\n}\n\n/**\n* Tokenizes a substring.\n*\n* @private\n* @param {string} substr - input string\n* @returns {Array} token array\n*\n* @example\n* var str = '(never)';\n* var out = tokenizeSubstring( str );\n* // returns [ '(', 'never', ')' ]\n*/\nfunction tokenizeSubstring( substr ) {\n\tvar prefixes = [];\n\tvar suffixes = [];\n\tvar match;\n\tvar done;\n\tvar res;\n\n\tdo {\n\t\tif (\n\t\t\t!EMOJIS[ substr ] &&\n\t\t\t!ABBRS[ substr ] &&\n\t\t\t!CONTRACT[ substr ]\n\t\t) {\n\t\t\tmatch = substr.split( REGEXP_PREFIXES );\n\t\t\tif ( match.length > 1 ) {\n\t\t\t\tprefixes.push( match[ 1 ] );\n\t\t\t\tsubstr = match[ 2 ];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmatch = substr.split( REGEXP_SUFFIXES );\n\t\t\t\tif ( match.length > 1 ) {\n\t\t\t\t\tsubstr = match[ 0 ];\n\t\t\t\t\tsuffixes.unshift( match[ 1 ] );\n\t\t\t\t} else {\n\t\t\t\t\tdone = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdone = true;\n\t\t}\n\t} while ( !done );\n\n\tres = prefixes;\n\tif ( substr ) {\n\t\tres.push( substr );\n\t}\n\n\t// If the last suffix is an ellipsis, move it to the front of the suffix array:\n\tif ( suffixes[ suffixes.length-1 ] === '...' ) {\n\t\tsuffixes.pop();\n\t\tsuffixes.unshift( '...' );\n\t}\n\textend( res, suffixes );\n\treturn res;\n}\n\n\n// MAIN //\n\n/**\n* Tokenize a string.\n*\n* @param {string} str - input string\n* @param {boolean} [keepWhitespace=false] - boolean indicating whether whitespace characters should be returned as part of the token array\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a boolean\n* @returns {Array} array of tokens\n*\n* @example\n* var str = 'Hello World!';\n* var out = tokenize( str );\n* // returns [ 'Hello', 'World', '!' ]\n*\n* @example\n* var str = '';\n* var out = tokenize( str );\n* // returns []\n*\n* @example\n* var str = 'Hello Mrs. Maple, could you call me back?';\n* var out = tokenize( str );\n* // returns [ 'Hello', 'Mrs.', 'Maple', ',', 'could', 'you', 'call', 'me', 'back', '?' ]\n*/\nfunction tokenize( str, keepWhitespace ) {\n\tvar subtkns;\n\tvar substrs;\n\tvar tokens;\n\tvar substr;\n\tvar cache;\n\tvar i;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0ND3R', str ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isBoolean( keepWhitespace ) ) {\n\t\t\tthrow new TypeError( format( '0ND6G', keepWhitespace ) );\n\t\t}\n\t}\n\tif ( !str ) {\n\t\treturn [];\n\t}\n\n\t// Split on whitespace:\n\tif ( keepWhitespace ) {\n\t\tsubstrs = str.split( /(\\s+)/ );\n\t} else {\n\t\tsubstrs = str.split( /\\s+/ );\n\t}\n\n\t// Set up cache to hold tokens for substring matches:\n\tcache = {};\n\n\t// Initialize token array:\n\ttokens = [];\n\n\tfor ( i = 0; i < substrs.length; i++ ) {\n\t\tsubstr = substrs[ i ];\n\t\tif ( hasOwnProp( cache, substr ) ) {\n\t\t\textend( tokens, cache[ substr ] );\n\t\t}\n\t\telse {\n\t\t\tsubtkns = tokenizeSubstring( substr );\n\t\t\textend( tokens, subtkns );\n\t\t\tcache[ substr ] = subtkns;\n\t\t}\n\t}\n\treturn tokens;\n}\n\n\n// EXPORTS //\n\nexport default tokenize;\n"],"names":["REGEXP_PREFIXES","REGEXP_SUFFIXES","extend","arr","ext","i","length","push","tokenizeSubstring","substr","match","done","res","prefixes","suffixes","EMOJIS","ABBRS","CONTRACT","split","unshift","pop","tokenize","str","keepWhitespace","subtkns","substrs","tokens","cache","isString","TypeError","format","arguments","isBoolean","hasOwnProp"],"mappings":";;+6NAiCIA,EAAkB,6BAClBC,EAAkB,kCAkBtB,SAASC,EAAQC,EAAKC,GACrB,IAAIC,EACJ,IAAMA,EAAI,EAAGA,EAAID,EAAIE,OAAQD,IAC5BF,EAAII,KAAMH,EAAKC,IAEhB,OAAOF,CACR,CAcA,SAASK,EAAmBC,GAC3B,IAEIC,EACAC,EACAC,EAJAC,EAAW,GACXC,EAAW,GAKf,GAEGC,EAAQN,IACRO,EAAOP,IACPQ,EAAUR,GAkBXE,GAAO,GAhBPD,EAAQD,EAAOS,MAAOlB,IACXM,OAAS,GACnBO,EAASN,KAAMG,EAAO,IACtBD,EAASC,EAAO,KAGhBA,EAAQD,EAAOS,MAAOjB,IACXK,OAAS,GACnBG,EAASC,EAAO,GAChBI,EAASK,QAAST,EAAO,KAEzBC,GAAO,SAOAA,GAaX,OAXAC,EAAMC,EACDJ,GACJG,EAAIL,KAAME,GAI4B,QAAlCK,EAAUA,EAASR,OAAO,KAC9BQ,EAASM,MACTN,EAASK,QAAS,QAEnBjB,EAAQU,EAAKE,GACNF,CACR,CA6BA,SAASS,EAAUC,EAAKC,GACvB,IAAIC,EACAC,EACAC,EACAjB,EACAkB,EACAtB,EACJ,IAAMuB,EAAUN,GACf,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvC,GAAKS,UAAUzB,OAAS,IACjB0B,EAAWT,GAChB,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAGxC,IAAMD,EACL,MAAO,GAgBR,IAXCG,EADIF,EACMD,EAAIJ,MAAO,SAEXI,EAAIJ,MAAO,OAItBS,EAAQ,CAAA,EAGRD,EAAS,GAEHrB,EAAI,EAAGA,EAAIoB,EAAQnB,OAAQD,IAChCI,EAASgB,EAASpB,GACb4B,EAAYN,EAAOlB,GACvBP,EAAQwB,EAAQC,EAAOlB,KAIvBP,EAAQwB,EADRF,EAAUhB,EAAmBC,IAE7BkB,EAAOlB,GAAWe,GAGpB,OAAOE,CACR"}